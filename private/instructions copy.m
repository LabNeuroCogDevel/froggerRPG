function instructions(w, s)
    
    keys=s.keys;
    instruct = {...
    [ 'In this game you get to be a frog and jump\n\n',...
      'around a game board looking for rewards!\n\n',...
      '\n\n',...
      'When you find rewards, you win points.\n\n',...
      'The more points you collect, the more money you will earn.\n\n',...
      '\n\n',...
      '(Press a key)'...
    ], ...
    [ 'Jump to new squares on the map by pressing the number that is on\n\n',...
        'to the square you would like to jump to.\n\n',...
        'You will have 1.5 seconds to select a square.\n\n', ...
        '\n\n',...
        'If you respond too slowly, the computer will choose a random square,\n\n',...
        'so be sure to respond quickly!.\n\n',...
        '\n\n',...
        '(Press a key)'...
    ], ...
    [ @doPromptDemo ], ...
    [ 'When you land on a square you will see the reward you found!\n\n', ...
        '# means there were no points\n\n', ...
        '$ means you got 10pts\n\n', ...
        '$$$ means you got 50pts\n\n', ...
        '\n\n',...
        'You won''t always find the same thing at each time you jump to a square.\n\n',...
        'Some squares will have rewards very often and other squares\n\n',...
        'will hardly ever have rewards,\n\n',...
        'so try to jump to the squares that give the most rewards!\n\n',...
        '\n\n',...
        '(Press a key)'...
    ], ...
    [ @doMoveDemo ], ...
    [ 'When you land on a reward, you will sometimes\n\n',...
        'have a chance to get a bonus reward.\n\n', ...
        '\n\n', ...
        'To earn the bonus reward, you must complete a challenge.\n\n', ...
        '\n\n', ...
        'You will see a fixation cross and the reward you are playing for.\n\n', ...
        '$ means you earn 10 bonus points,\n\n', ...
        '$$$ means you earn 50 bonus points!\n\n', ...
        '\n\n',...
        '(Press a key)'...
    ], ...
    [ @doFixationDemo ], ...
    [ 'After the cross disappears, you will see a group of arrows like this:\n\n', ...
        '<<<<<\n\n', ...
        'or\n\n', ...
        '>><>>\n\n', ...
        '\n\n', ...
        '(Press a key)'...
    ], ...
    [ 'To win the bonus reward, identify the direction of the MIDDLE arrow.\n\n', ...
        '<<<<<\n\n', ...
        '<\n\n', ...
        '\n\n',...
        'Press 1 (index finger) if the middle arrow pointed left (<)\n\n', ...
        'Press 2 (middle finger) if the middle arrow pointed right (>)\n\n', ...
        '(Press a key)'...
    ], ...    
    [ @doFlankerDemo ], ...
    [   'If you respond too slowly, you will not win any bonus points,\n\n',...
        'so make sure to respond quickly!\n\n', ...
        '\n\n',...
        'You will get short breaks during the game. During the breaks,\n\n',...
        'we see how well you are learning where the rewarding squares are.\n\n',...
        '\n\n',...
        'Remember, try to get as many points as possible to earn the most money!\n\n', ...
        '\n\n',...
        'Press a key when you''re ready to start'...
        ]...
    };
    
    
    

   
    KbCheck;
    for i = 1:length(instruct)
      % add newlines for windows
      if ispc
       % instruct{i}=strrep('\n','\n\n');
      end
      
      if ischar(instruct{i})
          DrawFormattedText(w,instruct{i},'center','center',[ 1 1 1 ]*255);
          Screen('Flip',w);
          WaitSecs(.5);
          [secs, keyCode, deltaSecs] =KbWait;
      else
          instruct{i}();
      end
      %escclose(keyCode);
    end


    function doPromptDemo()
        m.visitOutcomes = NaN*ones(s.map.gridSize, s.map.gridSize, 1000);
        m.currentLocation.x = 2;
        m.currentLocation.y = 3;
        
        moveOpts(1).value = 1;
        moveOpts(1).x = 1;
        moveOpts(1).y = 3;
        
        moveOpts(2).value = 2;
        moveOpts(2).x = 2;
        moveOpts(2).y = 2;
        
        e = [];
        e.map=m;
        updateMap(w, s, e, [], moveOpts);
        WaitSecs(0.5);
        KbWait;
%        WaitSecs(3.0);
    end


    function doMoveDemo()
        m.visitOutcomes = NaN*ones(s.map.gridSize, s.map.gridSize, 1000);
        m.currentLocation.x = 2;
        m.currentLocation.y = 3;
        moveOpts(1).value = 1;
        moveOpts(1).x = 1;
        moveOpts(1).y = 3;
        
        moveOpts(2).value = 2;
        moveOpts(2).x = 2;
        moveOpts(2).y = 2;
        
        e = [];
        e.map=m;
        updateMap(w, s, e, [], moveOpts);
        WaitSecs(1.0);
        
        e = [];
        e.map=m;
        updateMap(w, s, e, [2 2]);
        WaitSecs(1.0);

        m.currentLocation.x = 2;
        m.currentLocation.y = 2;  
        
        e = [];
        e.map=m;
        e.reward = 1;
        e.rewType = 2;
        move(w, s, e);
%        WaitSecs(2.0);
        WaitSecs(0.5);
        KbWait;

    end


    function doFixationDemo()
        e = [];
        e.rewType = 2;
        
        event_Fix(w, s, e, 1);
%        WaitSecs(2.0);
        WaitSecs(0.5);
        KbWait;

    end

    function doFlankerDemo()
        %flanker(w, s, [], forceCongruent, forceCentralDir)
        flanker(w, s, [], 1, 0);
        oldTextSize=Screen('TextSize', w, 32);
        DrawFormattedText(w,'Correct:\n\n<\n\n','center','center',[ 0 0 0 ]);
        Screen('Flip',w);
        Screen('TextSize', w, oldTextSize);
        WaitSecs(2);
        
        flanker(w, s, [], 0, 0);
        oldTextSize=Screen('TextSize', w, 32);
        DrawFormattedText(w,'Correct:\n\n<\n\n','center','center',[ 0 0 0 ]);
        Screen('Flip',w);
        Screen('TextSize', w, oldTextSize);
        WaitSecs(2);
       
    end

end